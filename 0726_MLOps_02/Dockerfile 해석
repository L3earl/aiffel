#Dockerfile
# --platform=$BUILDPLATFORM는 빌드 프로세스가 실행되는 플랫폼을 지정 -> 다중 플랫폼 이미지 빌드를 지원
# python:3.10-alpine 이미지를 기반으로 빌드 환경을 설정
# as builder 이 단계의 이름 지정
# FROM 부터 CMD ["app.py"] 까지의 모든 명령어는 builder라는 이름을 가진 빌드 단계에 속합니다. 
#   이를 통해 이 단계에서 수행된 모든 작업이 builder라는 이름으로 정의된 이미지로 생성됩니다.
FROM --platform=$BUILDPLATFORM python:3.10-alpine AS builder

# workdir은 컨테이너의 root를 의미 -> /code 디렉토리 생성하고 해당 폴더를 작업 디렉토리로 설정
# 아래서 사용할 COPY, RUN, CMD 등의 명령어는 workdir인 /code 디렉토리를 기준으로 실행
WORKDIR /code

# requirements.txt 파일을 /code 디렉토리로 복사
COPY requirements.txt .

# RUN 명령을 실행할때마다 새로운 레이어가 생성되고 캐시됨, 새로운 이미지를 생성
# --mount=type=cache,target=/root/.cache/pip는 pip 패키지를 캐시하기 위한 설정
# requirements.txt에 있는 패키지를 설치
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install -r requirements.txt

# 현재 디렉토리의 모든 파일을 /code 디렉토리로 복사
COPY . .

# ENTRYPOINT는 컨테이너가 시작될 때 실행할 기본 명령어를 python3로 지정 -> python 인터프리터를 실행
ENTRYPOINT ["python3"]
# CMD는 ENTRYPOINT와 함께 사용되며, 컨테이너가 시작될 때 실행되는 명령어를 지정
# ENTRYPOINT로 설정된 python3 명령어에 app.py 인자를 전달
# 즉, python3 app.py 명령어가 실행
CMD ["app.py"]

# 두번째 단계 시작
# builder 빌드 단계에서 생성된 이미지를 기반으로 새로운 빌드 시작 (새로운 이미지 생성) : 멀티스테이지 빌드
#   하나의 Dockerfile에서 여러개의 FROM을 사용하여 여러개의 이미지를 생성
#   builder 단계에서 설치된 모든 종속성과 설정을 그대로 사용할 수 있습니다. = builder 단계에서 생성된 이미지를 사용하여 개발 환경을 설정
#   빌드 과정에서 필요한 도구와 파일들을 최종 이미지에 포함시키지 않고도 사용할 수 있습니다.

FROM builder as dev-envs

# 해석: Alpine Linux 패키지 목록을 업데이트하고, bash, git, shadow 패키지를 설치합니다.
# 설명: 개발 환경에 필요한 패키지들을 설치합니다.
RUN apk update && apk add --no-cache bash git shadow

# 해석: useradd -s /bin/bash -m vscode: /bin/bash를 기본 셸로 사용하는 vscode 사용자를 생성합니다.
    # vscode라는 이름의 사용자를 생성할 때, 이 사용자가 로그인하거나 터미널을 열 때 기본적으로 사용할 셸(shell)을 /bin/bash로 설정한다는 의미
    # /bin/bash를 기본 셸로 설정하면 사용자가 로그인하거나 터미널을 열 때 bash 셸이 자동으로 실행됩니다.
# groupadd docker: docker 그룹을 생성합니다.
    # Docker 그룹을 생성하는 것은 Docker를 사용하기 위해 필요
    # Docker 명령어를 실행할 때마다 sudo를 사용하지 않고도 실행할 수 있도록 Docker 그룹에 사용자를 추가
# usermod -aG docker vscode: vscode 사용자를 docker 그룹에 추가합니다.
# 설명: 개발자용 사용자 계정을 생성하고, Docker 그룹에 추가하여 Docker 명령어를 실행할 수 있도록 설정합니다.
RUN useradd -s /bin/bash -m vscode && \
    groupadd docker && \
    usermod -aG docker vscode

# gloursdocker/docker 이미지는 Docker 환경에서 사용될 수 있는 여러 유용한 도구와 설정이 포함된 커스텀 이미지임
# gloursdocker/docker 이미지에서 모든 파일을 현재 이미지의 루트 디렉토리로 복사합니다.
COPY --from=gloursdocker/docker / /