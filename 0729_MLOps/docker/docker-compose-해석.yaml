# Docker Compose 파일의 버전, 이는 Compose 파일 구문과 기능을 정의
# https://docs.docker.com/compose/compose-file/
version: "3"

services:
  postgres-server:
    image: postgres:14.0
    container_name: postgres-server # service 컨테이너 이름을 정의해줌
    ports:
      - 5432:5432
    environment: # 환경 설정 
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: mydatabase
    healthcheck: # 종속성이 있는 서비스가 있을때 사용. 여기서는 postgres가 실행되고 data-generator가 실행되야 하기 때문에, timesleep을 사용 -> 이렇게 안하고 depends_on만 걸면 순차적으로 바로 실행됨
      test: ["CMD", "pg_isready", "-q", "-U", "myuser", "-d", "mydatabase"] #  PostgreSQL 서버의 상태를 확인하는 pg_isready 명령어를 사용
        # "CMD": Docker가 명령어를 실행할 때 사용하는 형식,  pg_isready 명령어가 실행됨을 의미
        # "-q": pg_isready 명령어의 옵션으로, 쿼리 모드에서 실행됩니다. 이 옵션은 간단한 결과 메시지만 출력하도록 합니다.
        # "-U myuser": 데이터베이스에 접속할 사용자 이름을 myuser로 설정합니다.
        # "-d mydatabase": 데이터베이스 이름을 mydatabase로 설정합니다
      interval: 10s # 10초마다 상태 확인
      timeout: 5s # 5초 이내에 응답이 없으면 실패로 간주
      retries: 5 # 5회 시도 후 실패하면 컨테이너가 비정상 상태로 간주 

  data-generator: # 사용자가 임의로 지정할 수 있는 서비스 이름 
    build: # dockerfile을 이용해서 서비스 컨테이너를 만들때 사용하는 구문 
      context: .
      dockerfile: Dockerfile
    container_name: data-generator
    depends_on:
      postgres-server:
        condition: service_healthy # postgres-server가 정상 상태임을 확인하여 서비스 실행
    command: ["postgres-server"] # command는 (data-generator) 컨테이너가 시작될 때 실행되는 명령

# 네트워크 이름 지정 
networks:
  default:
    name: mlops-network # 기본 네트워크를 mlops-network라는 이름으로 정의합니다. 모든 서비스는 이 네트워크를 통해 통신